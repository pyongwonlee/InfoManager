// <auto-generated />
using System;
using InfoManager.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace InfoManager.DataAccess.Migrations
{
    [DbContext(typeof(InfoManagerContext))]
    [Migration("20181202232350_InitDB")]
    partial class InitDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("InfoManager.DataAccess.Models.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("Isbn")
                        .HasColumnName("ISBN")
                        .HasMaxLength(50);

                    b.Property<string>("Location")
                        .HasMaxLength(250);

                    b.Property<string>("Publisher")
                        .HasMaxLength(250);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<int>("Year");

                    b.HasKey("BookId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("InfoManager.DataAccess.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("InfoManager.DataAccess.Models.Center", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityId");

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Note");

                    b.Property<string>("WebAddress")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("CityId")
                        .HasName("IX_CityId");

                    b.ToTable("Centers");
                });

            modelBuilder.Entity("InfoManager.DataAccess.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("ProvinceId");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId")
                        .HasName("IX_ProvinceId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("InfoManager.DataAccess.Models.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("WebAddress")
                        .HasMaxLength(250);

                    b.HasKey("CompanyId");

                    b.HasIndex("CategoryId")
                        .HasName("IX_CategoryId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("InfoManager.DataAccess.Models.Director", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Directors");
                });

            modelBuilder.Entity("InfoManager.DataAccess.Models.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DirectorId");

                    b.Property<double?>("Imdbrating")
                        .HasColumnName("IMDBRating");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<int?>("Tomatometer");

                    b.Property<int>("Year");

                    b.HasKey("Id");

                    b.HasIndex("DirectorId")
                        .HasName("IX_DirectorId");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("InfoManager.DataAccess.Models.Password", b =>
                {
                    b.Property<int>("PasswordId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .HasMaxLength(250);

                    b.Property<int>("CompanyId");

                    b.Property<string>("Note1");

                    b.Property<string>("Note2");

                    b.Property<string>("Note3");

                    b.Property<string>("Note4");

                    b.Property<string>("Note5");

                    b.Property<string>("PasswordCode")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.HasKey("PasswordId");

                    b.HasIndex("CompanyId")
                        .HasName("IX_CompanyId");

                    b.ToTable("Passwords");
                });

            modelBuilder.Entity("InfoManager.DataAccess.Models.Preference", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(100);

                    b.Property<int>("Value");

                    b.HasKey("Key");

                    b.ToTable("Preferences");
                });

            modelBuilder.Entity("InfoManager.DataAccess.Models.Province", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(5);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Provinces");
                });

            modelBuilder.Entity("InfoManager.DataAccess.Models.Center", b =>
                {
                    b.HasOne("InfoManager.DataAccess.Models.City", "City")
                        .WithMany("Centers")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_dbo.Centers_dbo.Cities_CityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("InfoManager.DataAccess.Models.City", b =>
                {
                    b.HasOne("InfoManager.DataAccess.Models.Province", "Province")
                        .WithMany("Cities")
                        .HasForeignKey("ProvinceId")
                        .HasConstraintName("FK_dbo.Cities_dbo.Provinces_ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("InfoManager.DataAccess.Models.Company", b =>
                {
                    b.HasOne("InfoManager.DataAccess.Models.Category", "Category")
                        .WithMany("Companies")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_dbo.Companies_dbo.Categories_CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("InfoManager.DataAccess.Models.Movie", b =>
                {
                    b.HasOne("InfoManager.DataAccess.Models.Director", "Director")
                        .WithMany("Movies")
                        .HasForeignKey("DirectorId")
                        .HasConstraintName("FK_dbo.Movies_dbo.Directors_DirectorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("InfoManager.DataAccess.Models.Password", b =>
                {
                    b.HasOne("InfoManager.DataAccess.Models.Company", "Company")
                        .WithMany("Passwords")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_dbo.Passwords_dbo.Companies_CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
